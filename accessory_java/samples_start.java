package samples;

import java.util.HashMap;

import accessory._ini;
import accessory.db;
import accessory.db_crypto;
import accessory.parent_ini_db;
import accessory.paths;

public class samples_start 
{
	public static void run_start()
	{
		String app_name = samples.APP;
		boolean includes_legacy = false; //When true, it looks for a package called "legacy" which might be missing anyway.

		//------
		//dbs_setup includes the setup to be used by default in all the DBs. 
		//It can be populated by using one of the parent_ini_db.get_setup_vals methods or via adding valid types.CONFIG_DB_SETUP_[*]-value pairs.
		//Any of those values can be overwritten by the specific setups in the _ini_db class, which are included when adding a new DB through the populate_db method called from populate_all_dbs.

		String db_name = samples.PERFECT_NAME;
		String username = samples.PERFECT_USERNAME;
		String password = samples.PERFECT_PASSWORD;
		
		//--- These two variables work together: if encrypt is true, user has to be non-null and the DB credentials will be retrieved from the corresponding encrypted file.
		boolean encrypt = true;
		String user = samples.USER; //This is the crypto ID associated with the given encryption information, which can be generated by calling the method db.encrypt_credentials.
		//---
		
		//If encrypt is true, a set of encrypted credentials located in a specific file is expected.
		//These credentials can be generated by calling db.encrypt_credentials/db.update_credentials. But that call or other related actions (e.g., changing the directory for credentials) can't be performed before _ini.start is called.
		//That is, if delay_encryption is set to false, dbs_setup would be updated with previously-generated credentials. Alternatively, delay_encryption can be true, dbs_setup would include a meaningless placeholder and the credentials would be updated after _ini.start is called. 
		boolean delay_encryption = true;
		
		HashMap<String, Object> dbs_setup = null;
		
		if (samples.USE_DB)
		{			
			String setup = null; //This variable can be null (i.e., default setup) or equal to the given DB (i.e., corresponding types.CONFIG_[*] constant). 
			String host = null; //A null value indicates that the default host will be used (e.g., "localhost" in MySQL).
			
			if (encrypt && !delay_encryption) dbs_setup = parent_ini_db.get_setup_vals(db_name, setup, user, host, encrypt);
			else dbs_setup = parent_ini_db.get_setup_vals(db_name, setup, username, password, host);
		}
		//------

		_ini.start(app_name, includes_legacy, dbs_setup);
		
		if (encrypt && delay_encryption)
		{
			paths.update_dir(paths.DIR_CRYPTO, samples.PERFECT_LOCATION);
			paths.update_dir(paths.DIR_CREDENTIALS, samples.PERFECT_LOCATION);

			db.update_credentials(db_crypto.get_source(), user, username, password);
		}
	}
}
